<?php

namespace App\Controller;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;
use App\Entity\Boost;
use App\Entity\Category;
use App\Entity\Gerant;
use App\Entity\OffreResto;
use App\Entity\Plat;
use App\Form\PlatType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Repository\PlatRepository;

class PlatController extends AbstractController
{
   
    #[Route('/plat', name: 'app_plat')]
    
    public function index(PlatRepository $platRepository): Response
    {
        
        return $this->render('Plats/index.html.twig', [
            'plats' => $platRepository->findAll(),
        ]);
    }

    #[Route('/new', name:'plat_new')]
    
    public function new(Request $request,ManagerRegistry $mr,EntityManagerInterface $entityManager): Response
    {
        $plat = new Plat();
        $form = $this->createForm(PlatType::class,$plat);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
 $plat =$form->getData();
$imageFile = $form->get('image')->getData();
if($imageFile){
    $allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];
    
    $originalFilename = pathinfo($imageFile->getClientOriginalName(), PATHINFO_EXTENSION);
    
    if (!in_array(strtolower($originalFilename), $allowedExtensions)) {
        $this->addFlash('error', 'Seules les images avec les extensions suivantes sont autorisées : jpg, jpeg, png, gif');
        return $this->redirectToRoute('plat_new');
    }
$newFilename=uniqid().'.png';
try {
        $imageFile->move(

            $this->getParameter('images_directory'),
            $newFilename
        );
    } catch (FileException $e) { 
    } 
        }
$plat->setImage($newFilename);
$entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($plat);
            $entityManager->flush();
            return $this->redirectToRoute('app_plat');
}
        return $this->render('Plats/addPlat.html.twig', [
            'plat' => $plat,
            'form' => $form->createView(),
        ]);
    }
    
    #[Route('/plat/{id}/edit', name: 'plat_edit', methods: ['GET', 'POST'])]
public function edit(Request $request, Plat $plat, EntityManagerInterface $entityManager): Response
{
    $form = $this->createForm(PlatType::class, $plat);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        $imageFile = $form->get('image')->getData();
        if ($imageFile) {
            $newFilename = $this->generateUniqueFileName().'.'.$imageFile->guessExtension();
            try {
                $imageFile->move(
                    $this->getParameter('images_directory'),
                    $newFilename
                );
                $plat->setImage($newFilename);
            } catch (FileException $e) {
                $this->addFlash('danger', 'Failed to upload image');
                return $this->redirectToRoute('plat_edit', ['id' => $plat->getIdPlat()]);
            }
        }

        // Validate Gerant (Restaurant) ID
        $gerant = $plat->getIdRestaurant();
        if (!$gerant || !$entityManager->getRepository(Gerant::class)->find($gerant->getId())) {
            $this->addFlash('error', 'Invalid Gerant ID');
            return $this->redirectToRoute('plat_edit', ['id' => $plat->getIdPlat()]);
        }

        $entityManager->flush();
        $this->addFlash('success', 'Plat updated successfully!');
        return $this->redirectToRoute('app_plat');
    }

    return $this->render('Plats/editPlat.html.twig', [
        'plat' => $plat,
        'form' => $form->createView(),
    ]);
}

    #[Route('/plat/{id}/delete', name:'plat_delete')]
    public function delete(Request $request, Plat $plat, EntityManagerInterface $entityManager): Response
    {
        $offres = $entityManager->getRepository(OffreResto::class)->findBy(['idPlat' => $plat->getIdPlat()]);
        foreach ($offres as $offre) {
            $entityManager->remove($offre);
        }
        $entityManager->remove($plat);
        $entityManager->flush();

        return $this->redirectToRoute('app_plat');
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    #[Route('/plat/search', name: 'plat_search', methods: ['GET'])]
public function search(Request $request, PlatRepository $platRepository): Response
{
    $query = $request->query->get('query');

    // Separate the name and price from the query
    preg_match('/^(?<name>[^\d]*)(?<price>\d+(\.\d{1,2})?)?$/', $query, $matches);

    $name = trim($matches['name']);
    $price = isset($matches['price']) ? (float) $matches['price'] : null;

    $plats = $platRepository->searchByNameAndPrice($name, $price);

    return $this->render('Plats/_searchResults.html.twig', [
        'plats' => $plats,
    ]);
}

    #[Route('/plat/tri', name: 'plat_tri')]
public function tri(Request $request, PlatRepository $platRepository): Response
{
    $tri = $request->query->get('tri', 'alphabetic_asc'); // Par défaut, tri alphabétique croissant

    switch ($tri) {
        case 'alphabetic_desc':
            $plats = $platRepository->findBy([], ['nom' => 'DESC']);
            break;
        case 'price_asc':
            $plats = $platRepository->findBy([], ['prix' => 'ASC']);
            break;
        case 'price_desc':
            $plats = $platRepository->findBy([], ['prix' => 'DESC']);
            break;
        default: // Tri alphabétique croissant
            $plats = $platRepository->findBy([], ['nom' => 'ASC']);
    }

    return $this->render('Plats/index.html.twig', [
        'plats' => $plats,
    ]);
}

    

}
